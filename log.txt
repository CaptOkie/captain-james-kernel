1. Needed open system call to prevent opens (learned from strace and saw the file as a param to the open system call)
2. Don't printk every single file on open (fails reboots).
3. Needed getxattr/setxattr (path_) since those are involved in setting and getting file attribute system calls (found from googling)
4. Copied all includes from the attr.c and copied getxattr/setxattr (path_).
5. Bad address errors from treating pointers in kernel space as pointers from user space (TOOK A LONG TIME TO FIGURE OUT).
6. Restricting files to a specific directory (iterating the dentry parents).
7. File not found on relative paths since getxattr/setxattr will usually work on relative paths, but not always (passing the dentry from open).
8. Modified path_getxattr and path_setxattr to take a path struct instead of a char* __user to fix the relative path problem.
   Removed the lines responsible for getting the path and freeing the path.
9. Include time.h to get current time
10. In filp_close because __close_fd, called in close, calls filp_close and we have the struct file* again.
11. Woops, only now noticed there are xattr functions to use intead of the functions we copied into the open.c file.
12. Might want to convert a setxattr function into an update function so that updates are more atomic.